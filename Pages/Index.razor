@page "/"
@using Microsoft.Fast.Components.FluentUI
@using System.Text.Json
@inject IJSRuntime _jsRuntimeService;

<div>@SelectedTable</div>
<div>@SelectedVariable</div>


<div style="display: flex; flex-direction: column; margin-top: 12px;width: 280px">
    <label id="label1">Choose table</label>
    <FluentRadioGroup ValueChanged="Callback2" Required="true" aria-labelledby="label1" Name="fruits" Orientation="Orientation.Vertical">
        @foreach (var tab in tables)
        {
            <FluentRadio Value=@tab>@tab</FluentRadio>
        }
    </FluentRadioGroup>
</div>

<div style="display: flex; flex-direction: column; margin-top: 12px; width: 280px">
    <label id="label2">Choose category</label>
    <FluentRadioGroup ValueChanged="Callback" Required="true" aria-labelledby="label2" Name="fruits" Orientation="Orientation.Vertical">
        @foreach (var cat in categories)
            {
                <FluentRadio Value=@cat>@cat</FluentRadio>
            }
    </FluentRadioGroup>
</div>

<FluentButton Appearance="Appearance.Outline" style="width: 280px;" @onclick="Write">CREATE</FluentButton>
<FluentButton Appearance="Appearance.Outline" style="width: 280px;" @onclick="Delete">DELETE</FluentButton>

@code{
    
    private string? SelectedTable { get; set; } = "";
    private string? SelectedVariable { get; set; } = "";
    private string SelectedSheet => GetSheet();

    readonly List<string> categories = new();
    readonly List<string> tables = new();
    
    //readonly List<Option<string>> _categories = new();
    //readonly List<Option<string>> _tables = new();
    private List<WorksheetModel> Worksheets { get; set; } = new();
    private JsonSerializerOptions _options;
    private DotNetObjectReference<Index> _lDotNetReference;
    

    protected override async Task OnInitializedAsync()
    {
        _lDotNetReference = DotNetObjectReference.Create(this);
        await _jsRuntimeService.InvokeVoidAsync("listWorksheets", _lDotNetReference);
        //StateHasChanged();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
        }
    }
    
    private async Task Write()
    {
        var sheet = GetSheet();
        var json = await _jsRuntimeService.InvokeAsync<JsonElement>("getValuesFromColumn", sheet, SelectedTable, SelectedVariable);

        var tables = json.Deserialize<string[][]>(_options);
        
        List<string> distinctValues = new();
        (tables ?? Array.Empty<string[]>()).ToList().ForEach(e =>
        {
            if (distinctValues.Contains(e[0]) == false)
                distinctValues.Add(e[0]);
        });
        await _jsRuntimeService.InvokeVoidAsync("add", sheet, SelectedTable, SelectedVariable, distinctValues);
    }
    
    private async Task Delete()
    {
        await _jsRuntimeService.InvokeVoidAsync("deleteLastWorksheet");
    }

    [JSInvokable]
    public void CallbackAllWorksheets(JsonElement worksheetsArray)
    {
        var tables = worksheetsArray.Deserialize<WorksheetModel[]>(_options);
        Worksheets.Clear();
        Worksheets.AddRange(tables);
        UpdateTablesCollection();
        UpdateCategoriesCollection();
    }

    void UpdateCategoriesCollection()
    {
        categories.Clear();
        foreach (var worksheet in Worksheets)
        {
            foreach (var table in worksheet.Tables)
            {
                if (table.TableName != SelectedTable) continue;
                for (int i = 0; i < table.Categories.Length; i++)
                {
                    bool state = i == 0;
                    if (state)
                    {
                        SelectedVariable = table.Categories[i];
                    }
                    
                    categories.Add(table.Categories[i]);
                }
            }
        }
    }
    
    void UpdateTablesCollection()
    {
        tables.Clear();
        foreach (var worksheet in Worksheets)
        {
            for (int i = 0; i < worksheet.Tables.Length; i++)
            {
                bool state = i == 0;
                if (state)
                {
                    SelectedTable = worksheet.Tables[i].TableName;
                }
                
                tables.Add(worksheet.Tables[i].TableName);
            }
        }
    }
    
    string GetSheet()
    {
        foreach (var tab in tables)
        {
            foreach (var sheet in Worksheets)
            {
                foreach (var t in sheet.Tables)
                {
                    if (t.TableName == tab)
                        return sheet.SheetName;
                }
            }
        }
        return "no sheet found";
    }

    private void Callback(string? obj)
    {
        SelectedVariable = obj;
    }
    
    private void Callback2(string? obj)
    {
        SelectedTable = obj;
        UpdateCategoriesCollection();
    }

}