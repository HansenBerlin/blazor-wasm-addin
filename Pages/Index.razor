@page "/"
@using Microsoft.Fast.Components.FluentUI
@using System.Text.Json
@inject IJSRuntime _jsRuntimeService;


<div>
    <label for="tables" style="font-size: 12px">Available tables</label>
    <FluentSelect id="tables" style="width: 280px; margin-bottom: 15px" Items=@_tables />
</div>
<div>
     <label for="categories" style="font-size: 12px">Available categories (columns)</label>
        <FluentSelect id="categories" style="width: 280px; margin-bottom: 30px" Items=@_categories />
</div>

<FluentButton Appearance="Appearance.Outline" style="width: 280px;" @onclick="Write">CREATE</FluentButton>

@code{

    private string SelectedTable => GetTables();
    private string SelectedVariable => GetCats();
    private string SelectedSheet => GetSheet();

    readonly List<Option<string>> _categories = new();
    readonly List<Option<string>> _tables = new();
    private List<WorksheetModel> Worksheets { get; set; } = new();
    private JsonSerializerOptions _options;
    private DotNetObjectReference<Index> _lDotNetReference;

    protected override async Task OnInitializedAsync()
    {
        _lDotNetReference = DotNetObjectReference.Create(this);
        await _jsRuntimeService.InvokeVoidAsync("listWorksheets", _lDotNetReference);

        //StateHasChanged();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
        }
    }
    
    private async Task Write()
    {
        var sheet = SelectedSheet;
        var table = SelectedTable;
        var variable = SelectedVariable;
        var json = await _jsRuntimeService.InvokeAsync<JsonElement>("getValuesFromColumn", sheet, table, variable);

        var tables = json.Deserialize<string[][]>(_options);

        List<string> distinctValues = new();
        (tables ?? Array.Empty<string[]>()).ToList().ForEach(e =>
        {
            if (distinctValues.Contains(e[0]) == false)
                distinctValues.Add(e[0]);
        });
        foreach (var val in distinctValues)
        {
            string sheetNew = $"{table}_{variable}_{val}";
            await _jsRuntimeService.InvokeVoidAsync("wrapper2", sheetNew, sheet, table, variable, val);
        }
        await _jsRuntimeService.InvokeVoidAsync("clearFilters", sheet, table);
    }

    [JSInvokable]
    public void CallbackAllWorksheets(JsonElement worksheetsArray)
    {
        var tables = worksheetsArray.Deserialize<WorksheetModel[]>(_options);
        Worksheets.Clear();
        Worksheets.AddRange(tables);
        Update2();
        Update();
        //StateHasChanged();
    }

    void Update()
    {
        _categories.Clear();
        foreach (var worksheet in Worksheets)
        {
            foreach (var table in worksheet.Tables)
            {
                for (int i = 0; i < table.Categories.Length; i++)
                {
                    bool state = i == 0;
                    var option = new Option<string>
                    {
                        Selected = state,
                        Key = i.ToString(),
                        Value = table.Categories[i]
                    };
                    
                    _categories.Add(option);
                }
            }
        }
    }
    
    void Update2()
    {
        _tables.Clear();
        foreach (var worksheet in Worksheets)
        {
            for (int i = 0; i < worksheet.Tables.Length; i++)
            {
                bool state = i == 0;
                var option = new Option<string>
                {
                    Selected = state,
                    Key = i.ToString(),
                    Value = worksheet.Tables[i].TableName
                };
                
                _tables.Add(option);
            }
        }
    }
    
    string GetCats()
    {
        foreach (var cat in _categories)
        {
            if (cat.Selected)
                return cat.Value;
        }
        return "not cat found";
    }
    
    string GetTables()
    {
        foreach (var tab in _tables)
        {
            if (tab.Selected)
                return tab.Value;
        }
        return "not table found";
    }
    
    string GetSheet()
    {
        var table = GetTables();
        foreach (var tab in _tables)
        {
            if (tab.Selected)
            {
                foreach (var sheet in Worksheets)
                {
                    foreach (var t in sheet.Tables)
                    {
                        if (t.TableName == table)
                            return sheet.SheetName;
                    }
                }
            }
        }
        return "no sheet found";
    }
}