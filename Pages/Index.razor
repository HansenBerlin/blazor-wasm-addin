@page "/"
@using Microsoft.Fast.Components.FluentUI
@using System.Text.Json
@inject IJSRuntime _jsRuntimeService;

<div>
    <label for="table-raw" style="font-size: 12px">Choose table containing raw data:</label>
    <FluentSelect id="table-raw" style="width: 280px; margin-bottom: 30px" @bind-Value="@TableSelection">
                @if (Worksheets.Count > 0)
                {
                    foreach (var worksheet in Worksheets)
                    {
                        
                        foreach (var table in worksheet.Tables)
                        {
                            <FluentOption>@($"{table.TableName} ({worksheet.SheetName})")</FluentOption>
                        }
                    }
                }
    </FluentSelect>
</div>
<div>
    <label for="cat-var" style="font-size: 12px">Choose categorial variable</label>
    <FluentSelect id="cat-var" style="width: 280px; margin-bottom: 30px" @bind-Value="@CategorialVariableSelection">
        @if (Worksheets.Count > 0)
        {
            foreach (var worksheet in Worksheets)
            {
                foreach (var table in worksheet.Tables)
                {
                    foreach (var cat in table.Categories)
                    {
                        <FluentOption>@($"{cat} ({table.TableName})")</FluentOption>
                    }
                }
            }
        }
    </FluentSelect>
</div>


<FluentButton Appearance="Appearance.Outline" style="width: 280px;" @onclick="GetSheets" >GET WORKSHEETS</FluentButton>
<FluentButton Appearance="Appearance.Outline" style="width: 280px;" @onclick="SetupData" >DELETE WORKSHEETS</FluentButton>


@code{
    
    private string TableSelection { get; set; } = "";
    private string CategorialVariableSelection { get; set; } = "";
    private List<WorksheetModel> Worksheets { get; set; } = new();
    private JsonSerializerOptions _options;
    private DotNetObjectReference<Index> lDotNetReference;

    protected override async Task OnInitializedAsync()
    {
        lDotNetReference = DotNetObjectReference.Create(this);
        //await _jsRuntimeService.InvokeVoidAsync("GLOBAL.SetDotnetReference", lDotNetReference);
        await _jsRuntimeService.InvokeVoidAsync("listWorksheets", lDotNetReference);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
        }
    }
    
    private async Task SetupData()
    {
        await _jsRuntimeService.InvokeVoidAsync("wrapper");
    }
    
    private async Task GetSheets()
    {
        await _jsRuntimeService.InvokeVoidAsync("listWorksheets", lDotNetReference);
    }
    
    
    [JSInvokable]
    public void CallbackAllWorksheets(JsonElement worksheetsArray)
    {
        var tables = worksheetsArray.Deserialize<WorksheetModel[]>(_options);
        Worksheets.Clear();
        Worksheets.AddRange(tables);
        
    }

    

    

}